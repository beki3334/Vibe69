import os
import logging
import yt_dlp
import aiohttp
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import FSInputFile
from flask import Flask
import threading

API_TOKEN = os.getenv("API_TOKEN")  # –¢–æ–∫–µ–Ω –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ Replit

if not API_TOKEN:
    raise ValueError("API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# --- Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è UptimeRobot ---
app = Flask('')


@app.route('/')
def home():
    return "Bot is alive!"


def run_flask():
    app.run(host='0.0.0.0', port=8080)


threading.Thread(target=run_flask).start()


# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    await message.reply(
        "üéß –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ‚Äî —è –Ω–∞–π–¥—É –∏ –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –∞—É–¥–∏–æ."
    )


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–ø–æ–∏—Å–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–∑—ã–∫–∏) ---
@dp.message()
async def send_song(message: types.Message):
    query = message.text

    await message.reply("üîé –ò—â—É –ø–µ—Å–Ω—é, –ø–æ–¥–æ–∂–¥–∏...")

    ydl_opts = {
        'format':
        'bestaudio/best',
        'noplaylist':
        True,
        'quiet':
        True,
        'outtmpl':
        'song.%(ext)s',
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
    }

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(f"ytsearch:{query}", download=True)
            if not info or 'entries' not in info or not info['entries']:
                raise Exception("–ü–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            entry = info['entries'][0]
            audio_file = ydl.prepare_filename(entry).replace(
                '.webm', '.mp3').replace('.m4a', '.mp3')
            title = entry.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')
            artist = entry.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å')

        audio_input = FSInputFile(audio_file)
        await bot.send_audio(message.chat.id,
                             audio_input,
                             title=title,
                             performer=artist)

        os.remove(audio_file)

    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    await dp.start_polling(bot, skip_updates=True)

if __name__ == '__main__':
    asyncio.run(main())
